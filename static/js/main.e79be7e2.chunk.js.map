{"version":3,"sources":["component/Navbar/Navigation.js","component/Navbar/NavigationAdmin.js","component/UserHome.js","component/StartEnd.js","component/ElectionStatus.js","getWeb3.js","component/Home.js","component/NotInit.js","component/Voting/Voting.js","component/Results/Results.js","component/Registration/Registration.js","component/AdminOnly.js","component/Admin/AddCandidate/AddCandidate.js","component/Admin/Verification/Verification.js","component/test.js","component/Footer/Footer.js","App.js","index.js"],"names":["Navbar","useState","open","setOpen","to","className","style","width","transform","activeClassName","onClick","NavbarAdmin","UserHome","props","el","electionTitle","organizationTitle","marginTop","adminName","adminTitle","textTransform","adminEmail","StartEnd","btn","display","padding","margin","minWidth","textAlign","alignSelf","borderTop","elStarted","type","endElFn","elEnded","title","color","textDecoration","ElectionStatus","border","marginLeft","marginRight","borderRadius","overflow","alignItems","justifyContent","getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","Home","componentDidMount","location","hash","reload","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","Election","networks","instance","Contract","abi","address","setState","ElectionInstance","account","state","methods","getAdmin","call","admin","isAdmin","getStart","start","getEnd","end","getAdminName","getAdminEmail","getAdminTitle","getElectionTitle","getOrganizationTitle","elDetails","alert","error","endElection","send","from","gas","registerElection","data","setElectionDetails","adminFName","toLowerCase","adminLName","renderAdminHome","EMsg","msg","AdminHome","useForm","handleSubmit","register","errors","formState","onSubmit","placeholder","required","message","name","pattern","value","organizationName","undefined","this","isElStarted","isElEnded","Component","NotInit","Voting","getTotalCandidate","candidateCount","i","candidateDetails","candidate","candidates","push","id","candidateId","header","slogan","voterDetails","voter","currentVoter","voterAddress","phone","hasVoted","isVerified","isRegistered","renderCandidates","castVote","vote","confirm","disabled","length","map","Result","voteCount","displayResults","displayWinner","winnerCandidate","maxVoteRecived","getWinner","winner","Registration","getTotalVoter","voterCount","voters","updateVoterName","event","voterName","target","updateVoterPhone","voterPhone","registerAsVoter","onChange","loadAllVoters","AdminOnly","borderColor","page","AddCandidate","updateHeader","updateSlogan","addCandidate","loadAdded","backgroundColor","maxHeight","renderUnverifiedVoters","verifyVoter","verifiedStatus","test","Footer","App","exact","path","component","Results","Verification","NotFound","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e79be7e2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport \"./Navbar.css\";\n\nexport default function Navbar() {\n  const [open, setOpen] = useState(false);\n  return (\n    <nav>\n      <NavLink to=\"/\" className=\"header\">\n        <i className=\"fab fa-hive\"></i> Home\n      </NavLink>\n      <ul\n        className=\"navbar-links\"\n        style={{ width: \"35%\", transform: open ? \"translateX(0px)\" : \"\" }}\n      >\n        <li>\n          <NavLink to=\"/Registration\" activeClassName=\"nav-active\">\n            <i className=\"far fa-registered\" /> Registration\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/Voting\" activeClassName=\"nav-active\">\n            <i className=\"fas fa-vote-yea\" /> Voting\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/Results\" activeClassName=\"nav-active\">\n            <i className=\"fas fa-poll-h\" /> Results\n          </NavLink>\n        </li>\n      </ul>\n      <i onClick={() => setOpen(!open)} className=\"fas fa-bars burger-menu\"></i>\n    </nav>\n  );\n}\n","import React, { useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport \"./Navbar.css\";\n\nexport default function NavbarAdmin() {\n  const [open, setOpen] = useState(false);\n  return (\n    <nav>\n      <div className=\"header\">\n        <NavLink to=\"/\">\n          <i className=\"fab fa-hive\" /> Admin\n        </NavLink>\n      </div>\n      <ul\n        className=\"navbar-links\"\n        style={{ transform: open ? \"translateX(0px)\" : \"\" }}\n      >\n        <li>\n          <NavLink to=\"/Verification\" activeClassName=\"nav-active\">\n            Verification\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/AddCandidate\" activeClassName=\"nav-active\">\n            Add Candidate\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/Registration\" activeClassName=\"nav-active\">\n            <i className=\"far fa-registered\" /> Registration\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/Voting\" activeClassName=\"nav-active\">\n            <i className=\"fas fa-vote-yea\" /> Voting\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/Results\" activeClassName=\"nav-active\">\n            <i className=\"fas fa-poll-h\" /> Results\n          </NavLink>\n        </li>\n      </ul>\n      <i onClick={() => setOpen(!open)} className=\"fas fa-bars burger-menu\"></i>\n    </nav>\n  );\n}\n","import React from \"react\";\n\nfunction UserHome(props) {\n  return (\n    <div>\n      <div className=\"container-main\">\n        <div className=\"container-list title\">\n          <h1>{props.el.electionTitle}</h1>\n          <br />\n          <center>{props.el.organizationTitle}</center>\n          <table style={{ marginTop: \"21px\" }}>\n            <tr>\n              <th>admin</th>\n              <td>\n                {props.el.adminName} ({props.el.adminTitle})\n              </td>\n            </tr>\n            <tr>\n              <th>contact</th>\n              <td style={{ textTransform: \"none\" }}>{props.el.adminEmail}</td>\n            </tr>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default UserHome;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst StartEnd = (props) => {\n  const btn = {\n    display: \"block\",\n    padding: \"21px\",\n    margin: \"7px\",\n    minWidth: \"max-content\",\n    textAlign: \"center\",\n    width: \"333px\",\n    alignSelf: \"center\",\n  };\n  return (\n    <div\n      className=\"container-main\"\n      style={{ borderTop: \"1px solid\", marginTop: \"0px\" }}\n    >\n      {!props.elStarted ? (\n        <>\n          {/* edit here to display start election Again button */}\n          {!props.elEnded ? (\n            <>\n              <div\n                className=\"container-item attention\"\n                style={{ display: \"block\" }}\n              >\n                <h2>Do not forget to add candidates.</h2>\n                <p>\n                  Go to{\" \"}\n                  <Link\n                    title=\"Add a new \"\n                    to=\"/addCandidate\"\n                    style={{\n                      color: \"black\",\n                      textDecoration: \"underline\",\n                    }}\n                  >\n                    add candidates\n                  </Link>{\" \"}\n                  page.\n                </p>\n              </div>\n              <div className=\"container-item\">\n                <button type=\"submit\" style={btn}>\n                  Start Election {props.elEnded ? \"Again\" : null}\n                </button>\n              </div>\n            </>\n          ) : (\n            <div className=\"container-item\">\n              <center>\n                <p>Re-deploy the contract to start election again.</p>\n              </center>\n            </div>\n          )}\n          {props.elEnded ? (\n            <div className=\"container-item\">\n              <center>\n                <p>The election ended.</p>\n              </center>\n            </div>\n          ) : null}\n        </>\n      ) : (\n        <>\n          <div className=\"container-item\">\n            <center>\n              <p>The election started.</p>\n            </center>\n          </div>\n          <div className=\"container-item\">\n            <button\n              type=\"button\"\n              // onClick={this.endElection}\n              onClick={props.endElFn}\n              style={btn}\n            >\n              End\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default StartEnd;\n","import React from \"react\";\n\nconst ElectionStatus = (props) => {\n  const electionStatus = {\n    padding: \"11px\",\n    margin: \"7px\",\n    width: \"100%\",\n    border: \"1px solid tomato\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    textAlign: \"center\",\n    borderRadius: \"0.5em\",\n    overflow: \"auto\",\n    alignItems: \"center\",\n    justifyContent: \"space-around\",\n    display: \"flex\",\n  };\n  return (\n    <div\n      className=\"container-main\"\n      style={{ borderTop: \"1px solid\", marginTop: \"0px\" }}\n    >\n      <h3>Election Status</h3>\n      <div style={electionStatus}>\n        <p>Started: {props.elStarted ? \"True\" : \"False\"}</p>\n        <p>Ended: {props.elEnded ? \"True\" : \"False\"}</p>\n      </div>\n      <div className=\"container-item\" />\n    </div>\n  );\n};\n\nexport default ElectionStatus;\n","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;","// Node modules\nimport React, { Component } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Link } from \"react-router-dom\";\n\n// Components\nimport Navbar from \"./Navbar/Navigation\";\nimport NavbarAdmin from \"./Navbar/NavigationAdmin\";\nimport UserHome from \"./UserHome\";\nimport StartEnd from \"./StartEnd\";\nimport ElectionStatus from \"./ElectionStatus\";\n\n// Contract\nimport getWeb3 from \"../getWeb3\";\nimport Election from \"../contracts/Election.json\";\n\n// CSS\nimport \"./Home.css\";\n\n// const buttonRef = React.createRef();\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ElectionInstance: undefined,\n      account: null,\n      web3: null,\n      isAdmin: false,\n      elStarted: false,\n      elEnded: false,\n      elDetails: {},\n    };\n  }\n\n  // refreshing once\n  componentDidMount = async () => {\n    if (!window.location.hash) {\n      window.location = window.location + \"#loaded\";\n      window.location.reload();\n    }\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Election.networks[networkId];\n      const instance = new web3.eth.Contract(\n        Election.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n        web3: web3,\n        ElectionInstance: instance,\n        account: accounts[0],\n      });\n\n      const admin = await this.state.ElectionInstance.methods.getAdmin().call();\n      if (this.state.account === admin) {\n        this.setState({ isAdmin: true });\n      }\n\n      // Get election start and end values\n      const start = await this.state.ElectionInstance.methods.getStart().call();\n      this.setState({ elStarted: start });\n      const end = await this.state.ElectionInstance.methods.getEnd().call();\n      this.setState({ elEnded: end });\n\n      // Getting election details from the contract\n      const adminName = await this.state.ElectionInstance.methods\n        .getAdminName()\n        .call();\n      const adminEmail = await this.state.ElectionInstance.methods\n        .getAdminEmail()\n        .call();\n      const adminTitle = await this.state.ElectionInstance.methods\n        .getAdminTitle()\n        .call();\n      const electionTitle = await this.state.ElectionInstance.methods\n        .getElectionTitle()\n        .call();\n      const organizationTitle = await this.state.ElectionInstance.methods\n        .getOrganizationTitle()\n        .call();\n\n      this.setState({\n        elDetails: {\n          adminName: adminName,\n          adminEmail: adminEmail,\n          adminTitle: adminTitle,\n          electionTitle: electionTitle,\n          organizationTitle: organizationTitle,\n        },\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n  // end election\n  endElection = async () => {\n    await this.state.ElectionInstance.methods\n      .endElection()\n      .send({ from: this.state.account, gas: 1000000 });\n    window.location.reload();\n  };\n  // register and start election\n  registerElection = async (data) => {\n    await this.state.ElectionInstance.methods\n      .setElectionDetails(\n        data.adminFName.toLowerCase() + \" \" + data.adminLName.toLowerCase(),\n        data.adminEmail.toLowerCase(),\n        data.adminTitle.toLowerCase(),\n        data.electionTitle.toLowerCase(),\n        data.organizationTitle.toLowerCase()\n      )\n      .send({ from: this.state.account, gas: 1000000 });\n    window.location.reload();\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return (\n        <>\n          <Navbar />\n          <center>Loading Web3, accounts, and contract...</center>\n        </>\n      );\n    }\n    return (\n      <>\n        {this.state.isAdmin ? <NavbarAdmin /> : <Navbar />}\n        <div className=\"container-main\">\n          <div className=\"container-item center-items info\">\n            Your Account: {this.state.account}\n          </div>\n          {!this.state.elStarted & !this.state.elEnded ? (\n            <div className=\"container-item info\">\n              <center>\n                <h3>The election has not been initialize.</h3>\n                {this.state.isAdmin ? (\n                  <p>Set up the election.</p>\n                ) : (\n                  <p>Please wait..</p>\n                )}\n              </center>\n            </div>\n          ) : null}\n        </div>\n        {this.state.isAdmin ? (\n          <>\n            <this.renderAdminHome />\n          </>\n        ) : this.state.elStarted ? (\n          <>\n            <UserHome el={this.state.elDetails} />\n          </>\n        ) : !this.state.isElStarted && this.state.isElEnded ? (\n          <>\n            <div className=\"container-item attention\">\n              <center>\n                <h3>The Election ended.</h3>\n                <br />\n                <Link\n                  to=\"/Results\"\n                  style={{ color: \"black\", textDecoration: \"underline\" }}\n                >\n                  See results\n                </Link>\n              </center>\n            </div>\n          </>\n        ) : null}\n      </>\n    );\n  }\n\n  renderAdminHome = () => {\n    const EMsg = (props) => {\n      return <span style={{ color: \"tomato\" }}>{props.msg}</span>;\n    };\n\n    const AdminHome = () => {\n      // Contains of Home page for the Admin\n      const {\n        handleSubmit,\n        register,\n        formState: { errors },\n      } = useForm();\n\n      const onSubmit = (data) => {\n        this.registerElection(data);\n      };\n\n      return (\n        <div>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            {!this.state.elStarted & !this.state.elEnded ? (\n              <div className=\"container-main\">\n                {/* about-admin */}\n                <div className=\"about-admin\">\n                  <h3>About Admin</h3>\n                  <div className=\"container-item center-items\">\n                    <div>\n                      <label className=\"label-home\">\n                        Full Name{\" \"}\n                        {errors.adminFName && <EMsg msg=\"*required\" />}\n                        <input\n                          className=\"input-home\"\n                          type=\"text\"\n                          placeholder=\"First Name\"\n                          {...register(\"adminFName\", {\n                            required: true,\n                          })}\n                        />\n                        <input\n                          className=\"input-home\"\n                          type=\"text\"\n                          placeholder=\"Last Name\"\n                          {...register(\"adminLName\")}\n                        />\n                      </label>\n\n                      <label className=\"label-home\">\n                        Email{\" \"}\n                        {errors.adminEmail && (\n                          <EMsg msg={errors.adminEmail.message} />\n                        )}\n                        <input\n                          className=\"input-home\"\n                          placeholder=\"eg. you@example.com\"\n                          name=\"adminEmail\"\n                          {...register(\"adminEmail\", {\n                            required: \"*Required\",\n                            pattern: {\n                              value: /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/, // email validation using RegExp\n                              message: \"*Invalid\",\n                            },\n                          })}\n                        />\n                      </label>\n\n                      <label className=\"label-home\">\n                        Job Title or Position{\" \"}\n                        {errors.adminTitle && <EMsg msg=\"*required\" />}\n                        <input\n                          className=\"input-home\"\n                          type=\"text\"\n                          placeholder=\"eg. HR Head \"\n                          {...register(\"adminTitle\", {\n                            required: true,\n                          })}\n                        />\n                      </label>\n                    </div>\n                  </div>\n                </div>\n                {/* about-election */}\n                <div className=\"about-election\">\n                  <h3>About Election</h3>\n                  <div className=\"container-item center-items\">\n                    <div>\n                      <label className=\"label-home\">\n                        Election Title{\" \"}\n                        {errors.electionTitle && <EMsg msg=\"*required\" />}\n                        <input\n                          className=\"input-home\"\n                          type=\"text\"\n                          placeholder=\"eg. School Election\"\n                          {...register(\"electionTitle\", {\n                            required: true,\n                          })}\n                        />\n                      </label>\n                      <label className=\"label-home\">\n                        Organization Name{\" \"}\n                        {errors.organizationName && <EMsg msg=\"*required\" />}\n                        <input\n                          className=\"input-home\"\n                          type=\"text\"\n                          placeholder=\"eg. Lifeline Academy\"\n                          {...register(\"organizationTitle\", {\n                            required: true,\n                          })}\n                        />\n                      </label>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ) : this.state.elStarted ? (\n              <UserHome el={this.state.elDetails} />\n            ) : null}\n            <StartEnd\n              elStarted={this.state.elStarted}\n              elEnded={this.state.elEnded}\n              endElFn={this.endElection}\n            />\n            <ElectionStatus\n              elStarted={this.state.elStarted}\n              elEnded={this.state.elEnded}\n            />\n          </form>\n        </div>\n      );\n    };\n    return <AdminHome />;\n  };\n}\n","// Node module\nimport React from \"react\";\n\nconst NotInit = () => {\n  // Component: Displaying election not initialize message.\n  return (\n    <div className=\"container-item info\">\n      <center>\n        <h3>The election has not been initialize.</h3>\n        <p>Please Wait..</p>\n      </center>\n    </div>\n  );\n};\nexport default NotInit;\n","// Node modules\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// Components\nimport Navbar from \"../Navbar/Navigation\";\nimport NavbarAdmin from \"../Navbar/NavigationAdmin\";\nimport NotInit from \"../NotInit\";\n\n// Contract\nimport getWeb3 from \"../../getWeb3\";\nimport Election from \"../../contracts/Election.json\";\n\n// CSS\nimport \"./Voting.css\";\n\nexport default class Voting extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ElectionInstance: undefined,\n      account: null,\n      web3: null,\n      isAdmin: false,\n      candidateCount: undefined,\n      candidates: [],\n      isElStarted: false,\n      isElEnded: false,\n      currentVoter: {\n        address: undefined,\n        name: null,\n        phone: null,\n        hasVoted: false,\n        isVerified: false,\n        isRegistered: false,\n      },\n    };\n  }\n  componentDidMount = async () => {\n    // refreshing once\n    if (!window.location.hash) {\n      window.location = window.location + \"#loaded\";\n      window.location.reload();\n    }\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Election.networks[networkId];\n      const instance = new web3.eth.Contract(\n        Election.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n        web3: web3,\n        ElectionInstance: instance,\n        account: accounts[0],\n      });\n\n      // Get total number of candidates\n      const candidateCount = await this.state.ElectionInstance.methods\n        .getTotalCandidate()\n        .call();\n      this.setState({ candidateCount: candidateCount });\n\n      // Get start and end values\n      const start = await this.state.ElectionInstance.methods.getStart().call();\n      this.setState({ isElStarted: start });\n      const end = await this.state.ElectionInstance.methods.getEnd().call();\n      this.setState({ isElEnded: end });\n\n      // Loading Candidates details\n      for (let i = 1; i <= this.state.candidateCount; i++) {\n        const candidate = await this.state.ElectionInstance.methods\n          .candidateDetails(i - 1)\n          .call();\n        this.state.candidates.push({\n          id: candidate.candidateId,\n          header: candidate.header,\n          slogan: candidate.slogan,\n        });\n      }\n      this.setState({ candidates: this.state.candidates });\n\n      // Loading current voter\n      const voter = await this.state.ElectionInstance.methods\n        .voterDetails(this.state.account)\n        .call();\n      this.setState({\n        currentVoter: {\n          address: voter.voterAddress,\n          name: voter.name,\n          phone: voter.phone,\n          hasVoted: voter.hasVoted,\n          isVerified: voter.isVerified,\n          isRegistered: voter.isRegistered,\n        },\n      });\n\n      // Admin account and verification\n      const admin = await this.state.ElectionInstance.methods.getAdmin().call();\n      if (this.state.account === admin) {\n        this.setState({ isAdmin: true });\n      }\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  renderCandidates = (candidate) => {\n    const castVote = async (id) => {\n      await this.state.ElectionInstance.methods\n        .vote(id)\n        .send({ from: this.state.account, gas: 1000000 });\n      window.location.reload();\n    };\n    const confirmVote = (id, header) => {\n      var r = window.confirm(\n        \"Vote for \" + header + \" with Id \" + id + \".\\nAre you sure?\"\n      );\n      if (r === true) {\n        castVote(id);\n      }\n    };\n    return (\n      <div className=\"container-item\">\n        <div className=\"candidate-info\">\n          <h2>\n            {candidate.header} <small>#{candidate.id}</small>\n          </h2>\n          <p className=\"slogan\">{candidate.slogan}</p>\n        </div>\n        <div className=\"vote-btn-container\">\n          <button\n            onClick={() => confirmVote(candidate.id, candidate.header)}\n            className=\"vote-bth\"\n            disabled={\n              !this.state.currentVoter.isRegistered ||\n              !this.state.currentVoter.isVerified ||\n              this.state.currentVoter.hasVoted\n            }\n          >\n            Vote\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return (\n        <>\n          {this.state.isAdmin ? <NavbarAdmin /> : <Navbar />}\n          <center>Loading Web3, accounts, and contract...</center>\n        </>\n      );\n    }\n\n    return (\n      <>\n        {this.state.isAdmin ? <NavbarAdmin /> : <Navbar />}\n        <div>\n          {!this.state.isElStarted && !this.state.isElEnded ? (\n            <NotInit />\n          ) : this.state.isElStarted && !this.state.isElEnded ? (\n            <>\n              {this.state.currentVoter.isRegistered ? (\n                this.state.currentVoter.isVerified ? (\n                  this.state.currentVoter.hasVoted ? (\n                    <div className=\"container-item success\">\n                      <div>\n                        <strong>You've casted your vote.</strong>\n                        <p />\n                        <center>\n                          <Link\n                            to=\"/Results\"\n                            style={{\n                              color: \"black\",\n                              textDecoration: \"underline\",\n                            }}\n                          >\n                            See Results\n                          </Link>\n                        </center>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"container-item info\">\n                      <center>Go ahead and cast your vote.</center>\n                    </div>\n                  )\n                ) : (\n                  <div className=\"container-item attention\">\n                    <center>Please wait for admin to verify.</center>\n                  </div>\n                )\n              ) : (\n                <>\n                  <div className=\"container-item attention\">\n                    <center>\n                      <p>You're not registered. Please register first.</p>\n                      <br />\n                      <Link\n                        to=\"/Registration\"\n                        style={{ color: \"black\", textDecoration: \"underline\" }}\n                      >\n                        Registration Page\n                      </Link>\n                    </center>\n                  </div>\n                </>\n              )}\n              <div className=\"container-main\">\n                <h2>Candidates</h2>\n                <small>Total candidates: {this.state.candidates.length}</small>\n                {this.state.candidates.length < 1 ? (\n                  <div className=\"container-item attention\">\n                    <center>Not one to vote for.</center>\n                  </div>\n                ) : (\n                  <>\n                    {this.state.candidates.map(this.renderCandidates)}\n                    <div\n                      className=\"container-item\"\n                      style={{ border: \"1px solid black\" }}\n                    >\n                      <center>That is all.</center>\n                    </div>\n                  </>\n                )}\n              </div>\n            </>\n          ) : !this.state.isElStarted && this.state.isElEnded ? (\n            <>\n              <div className=\"container-item attention\">\n                <center>\n                  <h3>The Election ended.</h3>\n                  <br />\n                  <Link\n                    to=\"/Results\"\n                    style={{ color: \"black\", textDecoration: \"underline\" }}\n                  >\n                    See results\n                  </Link>\n                </center>\n              </div>\n            </>\n          ) : null}\n        </div>\n      </>\n    );\n  }\n}\n","// Node modules\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// Components\nimport Navbar from \"../Navbar/Navigation\";\nimport NavbarAdmin from \"../Navbar/NavigationAdmin\";\nimport NotInit from \"../NotInit\";\n\n// Contract\nimport getWeb3 from \"../../getWeb3\";\nimport Election from \"../../contracts/Election.json\";\n\n// CSS\nimport \"./Results.css\";\n\nexport default class Result extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ElectionInstance: undefined,\n      account: null,\n      web3: null,\n      isAdmin: false,\n      candidateCount: undefined,\n      candidates: [],\n      isElStarted: false,\n      isElEnded: false,\n    };\n  }\n  componentDidMount = async () => {\n    // refreshing once\n    if (!window.location.hash) {\n      window.location = window.location + \"#loaded\";\n      window.location.reload();\n    }\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Election.networks[networkId];\n      const instance = new web3.eth.Contract(\n        Election.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, ElectionInstance: instance, account: accounts[0] });\n\n      // Get total number of candidates\n      const candidateCount = await this.state.ElectionInstance.methods\n        .getTotalCandidate()\n        .call();\n      this.setState({ candidateCount: candidateCount });\n\n      // Get start and end values\n      const start = await this.state.ElectionInstance.methods.getStart().call();\n      this.setState({ isElStarted: start });\n      const end = await this.state.ElectionInstance.methods.getEnd().call();\n      this.setState({ isElEnded: end });\n\n      // Loadin Candidates detials\n      for (let i = 1; i <= this.state.candidateCount; i++) {\n        const candidate = await this.state.ElectionInstance.methods\n          .candidateDetails(i - 1)\n          .call();\n        this.state.candidates.push({\n          id: candidate.candidateId,\n          header: candidate.header,\n          slogan: candidate.slogan,\n          voteCount: candidate.voteCount,\n        });\n      }\n\n      this.setState({ candidates: this.state.candidates });\n\n      // Admin account and verification\n      const admin = await this.state.ElectionInstance.methods.getAdmin().call();\n      if (this.state.account === admin) {\n        this.setState({ isAdmin: true });\n      }\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return (\n        <>\n          {this.state.isAdmin ? <NavbarAdmin /> : <Navbar />}\n          <center>Loading Web3, accounts, and contract...</center>\n        </>\n      );\n    }\n\n    return (\n      <>\n        {this.state.isAdmin ? <NavbarAdmin /> : <Navbar />}\n        <br />\n        <div>\n          {!this.state.isElStarted && !this.state.isElEnded ? (\n            <NotInit />\n          ) : this.state.isElStarted && !this.state.isElEnded ? (\n            <div className=\"container-item attention\">\n              <center>\n                <h3>The election is being conducted at the movement.</h3>\n                <p>Result will be displayed once the election has ended.</p>\n                <p>Go ahead and cast your vote {\"(if not already)\"}.</p>\n                <br />\n                <Link\n                  to=\"/Voting\"\n                  style={{ color: \"black\", textDecoration: \"underline\" }}\n                >\n                  Voting Page\n                </Link>\n              </center>\n            </div>\n          ) : !this.state.isElStarted && this.state.isElEnded ? (\n            displayResults(this.state.candidates)\n          ) : null}\n        </div>\n      </>\n    );\n  }\n}\n\nfunction displayWinner(candidates) {\n  const getWinner = (candidates) => {\n    // Returns an object having maxium vote count\n    let maxVoteRecived = 0;\n    let winnerCandidate = [];\n    for (let i = 0; i < candidates.length; i++) {\n      if (candidates[i].voteCount > maxVoteRecived) {\n        maxVoteRecived = candidates[i].voteCount;\n        winnerCandidate = [candidates[i]];\n      } else if (candidates[i].voteCount === maxVoteRecived) {\n        winnerCandidate.push(candidates[i]);\n      }\n    }\n    return winnerCandidate;\n  };\n  const renderWinner = (winner) => {\n    return (\n      <div className=\"container-winner\">\n        <div className=\"winner-info\">\n          <p className=\"winner-tag\">Winner!</p>\n          <h2> {winner.header}</h2>\n          <p className=\"winner-slogan\">{winner.slogan}</p>\n        </div>\n        <div className=\"winner-votes\">\n          <div className=\"votes-tag\">Total Votes: </div>\n          <div className=\"vote-count\">{winner.voteCount}</div>\n        </div>\n      </div>\n    );\n  };\n  const winnerCandidate = getWinner(candidates);\n  return <>{winnerCandidate.map(renderWinner)}</>;\n}\n\nexport function displayResults(candidates) {\n  const renderResults = (candidate) => {\n    return (\n      <tr>\n        <td>{candidate.id}</td>\n        <td>{candidate.header}</td>\n        <td>{candidate.voteCount}</td>\n      </tr>\n    );\n  };\n  return (\n    <>\n      {candidates.length > 0 ? (\n        <div className=\"container-main\">{displayWinner(candidates)}</div>\n      ) : null}\n      <div className=\"container-main\" style={{ borderTop: \"1px solid\" }}>\n        <h2>Results</h2>\n        <small>Total candidates: {candidates.length}</small>\n        {candidates.length < 1 ? (\n          <div className=\"container-item attention\">\n            <center>No candidates.</center>\n          </div>\n        ) : (\n          <>\n            <div className=\"container-item\">\n              <table>\n                <tr>\n                  <th>Id</th>\n                  <th>Candidate</th>\n                  <th>Votes</th>\n                </tr>\n                {candidates.map(renderResults)}\n              </table>\n            </div>\n            <div\n              className=\"container-item\"\n              style={{ border: \"1px solid black\" }}\n            >\n              <center>That is all.</center>\n            </div>\n          </>\n        )}\n      </div>\n    </>\n  );\n}\n","// Node modules\nimport React, { Component } from \"react\";\n\n// Components\nimport Navbar from \"../Navbar/Navigation\";\nimport NavbarAdmin from \"../Navbar/NavigationAdmin\";\nimport NotInit from \"../NotInit\";\n\n// CSS\nimport \"./Registration.css\";\n\n// Contract\nimport getWeb3 from \"../../getWeb3\";\nimport Election from \"../../contracts/Election.json\";\n\nexport default class Registration extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ElectionInstance: undefined,\n      web3: null,\n      account: null,\n      isAdmin: false,\n      isElStarted: false,\n      isElEnded: false,\n      voterCount: undefined,\n      voterName: \"\",\n      voterPhone: \"\",\n      voters: [],\n      currentVoter: {\n        address: undefined,\n        name: null,\n        phone: null,\n        hasVoted: false,\n        isVerified: false,\n        isRegistered: false,\n      },\n    };\n  }\n\n  // refreshing once\n  componentDidMount = async () => {\n    if (!window.location.hash) {\n      window.location = window.location + \"#loaded\";\n      window.location.reload();\n    }\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Election.networks[networkId];\n      const instance = new web3.eth.Contract(\n        Election.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n        web3: web3,\n        ElectionInstance: instance,\n        account: accounts[0],\n      });\n\n      // Admin account and verification\n      const admin = await this.state.ElectionInstance.methods.getAdmin().call();\n      if (this.state.account === admin) {\n        this.setState({ isAdmin: true });\n      }\n\n      // Get start and end values\n      const start = await this.state.ElectionInstance.methods.getStart().call();\n      this.setState({ isElStarted: start });\n      const end = await this.state.ElectionInstance.methods.getEnd().call();\n      this.setState({ isElEnded: end });\n\n      // Total number of voters\n      const voterCount = await this.state.ElectionInstance.methods\n        .getTotalVoter()\n        .call();\n      this.setState({ voterCount: voterCount });\n\n      // Loading all the voters\n      for (let i = 0; i < this.state.voterCount; i++) {\n        const voterAddress = await this.state.ElectionInstance.methods\n          .voters(i)\n          .call();\n        const voter = await this.state.ElectionInstance.methods\n          .voterDetails(voterAddress)\n          .call();\n        this.state.voters.push({\n          address: voter.voterAddress,\n          name: voter.name,\n          phone: voter.phone,\n          hasVoted: voter.hasVoted,\n          isVerified: voter.isVerified,\n          isRegistered: voter.isRegistered,\n        });\n      }\n      this.setState({ voters: this.state.voters });\n\n      // Loading current voters\n      const voter = await this.state.ElectionInstance.methods\n        .voterDetails(this.state.account)\n        .call();\n      this.setState({\n        currentVoter: {\n          address: voter.voterAddress,\n          name: voter.name,\n          phone: voter.phone,\n          hasVoted: voter.hasVoted,\n          isVerified: voter.isVerified,\n          isRegistered: voter.isRegistered,\n        },\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      console.error(error);\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details (f12).`\n      );\n    }\n  };\n  updateVoterName = (event) => {\n    this.setState({ voterName: event.target.value });\n  };\n  updateVoterPhone = (event) => {\n    this.setState({ voterPhone: event.target.value });\n  };\n  registerAsVoter = async () => {\n    await this.state.ElectionInstance.methods\n      .registerAsVoter(this.state.voterName, this.state.voterPhone)\n      .send({ from: this.state.account, gas: 1000000 });\n    window.location.reload();\n  };\n  render() {\n    if (!this.state.web3) {\n      return (\n        <>\n          {this.state.isAdmin ? <NavbarAdmin /> : <Navbar />}\n          <center>Loading Web3, accounts, and contract...</center>\n        </>\n      );\n    }\n    return (\n      <>\n        {this.state.isAdmin ? <NavbarAdmin /> : <Navbar />}\n        {!this.state.isElStarted && !this.state.isElEnded ? (\n          <NotInit />\n        ) : (\n          <>\n            <div className=\"container-item info\">\n              <p>Total registered voters: {this.state.voters.length}</p>\n            </div>\n            <div className=\"container-main\">\n              <h3>Registration</h3>\n              <small>Register to vote.</small>\n              <div className=\"container-item\">\n                <form>\n                  <div className=\"div-li\">\n                    <label className={\"label-r\"}>\n                      Account Address\n                      <input\n                        className={\"input-r\"}\n                        type=\"text\"\n                        value={this.state.account}\n                        style={{ width: \"400px\" }}\n                      />{\" \"}\n                    </label>\n                  </div>\n                  <div className=\"div-li\">\n                    <label className={\"label-r\"}>\n                      Name\n                      <input\n                        className={\"input-r\"}\n                        type=\"text\"\n                        placeholder=\"eg. Ava\"\n                        value={this.state.voterName}\n                        onChange={this.updateVoterName}\n                      />{\" \"}\n                    </label>\n                  </div>\n                  <div className=\"div-li\">\n                    <label className={\"label-r\"}>\n                      Phone number <span style={{ color: \"tomato\" }}>*</span>\n                      <input\n                        className={\"input-r\"}\n                        type=\"number\"\n                        placeholder=\"eg. 9841234567\"\n                        value={this.state.voterPhone}\n                        onChange={this.updateVoterPhone}\n                      />\n                    </label>\n                  </div>\n                  <p className=\"note\">\n                    <span style={{ color: \"tomato\" }}> Note: </span>\n                    <br /> Make sure your account address and Phone number are\n                    correct. <br /> Admin might not approve your account if the\n                    provided Phone number nub does not matches the account\n                    address registered in admins catalogue.\n                  </p>\n                  <button\n                    className=\"btn-add\"\n                    disabled={\n                      this.state.voterPhone.length !== 10 ||\n                      this.state.currentVoter.isVerified\n                    }\n                    onClick={this.registerAsVoter}\n                  >\n                    {this.state.currentVoter.isRegistered\n                      ? \"Update\"\n                      : \"Register\"}\n                  </button>\n                </form>\n              </div>\n            </div>\n            <div\n              className=\"container-main\"\n              style={{\n                borderTop: this.state.currentVoter.isRegistered\n                  ? null\n                  : \"1px solid\",\n              }}\n            >\n              {loadCurrentVoter(\n                this.state.currentVoter,\n                this.state.currentVoter.isRegistered\n              )}\n            </div>\n            {this.state.isAdmin ? (\n              <div\n                className=\"container-main\"\n                style={{ borderTop: \"1px solid\" }}\n              >\n                <small>TotalVoters: {this.state.voters.length}</small>\n                {loadAllVoters(this.state.voters)}\n              </div>\n            ) : null}\n          </>\n        )}\n      </>\n    );\n  }\n}\nexport function loadCurrentVoter(voter, isRegistered) {\n  return (\n    <>\n      <div\n        className={\"container-item \" + (isRegistered ? \"success\" : \"attention\")}\n      >\n        <center>Your Registered Info</center>\n      </div>\n      <div\n        className={\"container-list \" + (isRegistered ? \"success\" : \"attention\")}\n      >\n        <table>\n          <tr>\n            <th>Account Address</th>\n            <td>{voter.address}</td>\n          </tr>\n          <tr>\n            <th>Name</th>\n            <td>{voter.name}</td>\n          </tr>\n          <tr>\n            <th>Phone</th>\n            <td>{voter.phone}</td>\n          </tr>\n          <tr>\n            <th>Voted</th>\n            <td>{voter.hasVoted ? \"True\" : \"False\"}</td>\n          </tr>\n          <tr>\n            <th>Verification</th>\n            <td>{voter.isVerified ? \"True\" : \"False\"}</td>\n          </tr>\n          <tr>\n            <th>Registered</th>\n            <td>{voter.isRegistered ? \"True\" : \"False\"}</td>\n          </tr>\n        </table>\n      </div>\n    </>\n  );\n}\nexport function loadAllVoters(voters) {\n  const renderAllVoters = (voter) => {\n    return (\n      <>\n        <div className=\"container-list success\">\n          <table>\n            <tr>\n              <th>Account address</th>\n              <td>{voter.address}</td>\n            </tr>\n            <tr>\n              <th>Name</th>\n              <td>{voter.name}</td>\n            </tr>\n            <tr>\n              <th>Phone</th>\n              <td>{voter.phone}</td>\n            </tr>\n            <tr>\n              <th>Voted</th>\n              <td>{voter.hasVoted ? \"True\" : \"False\"}</td>\n            </tr>\n            <tr>\n              <th>Verified</th>\n              <td>{voter.isVerified ? \"True\" : \"False\"}</td>\n            </tr>\n            <tr>\n              <th>Registered</th>\n              <td>{voter.isRegistered ? \"True\" : \"False\"}</td>\n            </tr>\n          </table>\n        </div>\n      </>\n    );\n  };\n  return (\n    <>\n      <div className=\"container-item success\">\n        <center>List of voters</center>\n      </div>\n      {voters.map(renderAllVoters)}\n    </>\n  );\n}\n","import React from \"react\";\n\nconst AdminOnly = (props) => {\n  return (\n    <div className=\"container-item attention\" style={{ borderColor: \"tomato\" }}>\n      <center>\n        <div style={{ margin: \"17px\" }}>\n          <h1>{props.page}</h1>\n        </div>\n        <p>Admin access only.</p>\n      </center>\n    </div>\n  );\n};\n\nexport default AdminOnly;\n","import React, { Component } from \"react\";\n\nimport Navbar from \"../../Navbar/Navigation\";\nimport NavbarAdmin from \"../../Navbar/NavigationAdmin\";\n\nimport getWeb3 from \"../../../getWeb3\";\nimport Election from \"../../../contracts/Election.json\";\n\nimport AdminOnly from \"../../AdminOnly\";\n\nimport \"./AddCandidate.css\";\n\nexport default class AddCandidate extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ElectionInstance: undefined,\n      web3: null,\n      accounts: null,\n      isAdmin: false,\n      header: \"\",\n      slogan: \"\",\n      candidates: [],\n      candidateCount: undefined,\n    };\n  }\n\n  componentDidMount = async () => {\n    // refreshing page only once\n    if (!window.location.hash) {\n      window.location = window.location + \"#loaded\";\n      window.location.reload();\n    }\n\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Election.networks[networkId];\n      const instance = new web3.eth.Contract(\n        Election.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n        web3: web3,\n        ElectionInstance: instance,\n        account: accounts[0],\n      });\n\n      // Total number of candidates\n      const candidateCount = await this.state.ElectionInstance.methods\n        .getTotalCandidate()\n        .call();\n      this.setState({ candidateCount: candidateCount });\n\n      const admin = await this.state.ElectionInstance.methods.getAdmin().call();\n      if (this.state.account === admin) {\n        this.setState({ isAdmin: true });\n      }\n\n      // Loading Candidates details\n      for (let i = 0; i < this.state.candidateCount; i++) {\n        const candidate = await this.state.ElectionInstance.methods\n          .candidateDetails(i)\n          .call();\n        this.state.candidates.push({\n          id: candidate.candidateId,\n          header: candidate.header,\n          slogan: candidate.slogan,\n        });\n      }\n\n      this.setState({ candidates: this.state.candidates });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      console.error(error);\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n    }\n  };\n  updateHeader = (event) => {\n    this.setState({ header: event.target.value });\n  };\n  updateSlogan = (event) => {\n    this.setState({ slogan: event.target.value });\n  };\n\n  addCandidate = async () => {\n    await this.state.ElectionInstance.methods\n      .addCandidate(this.state.header, this.state.slogan)\n      .send({ from: this.state.account, gas: 1000000 });\n    window.location.reload();\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return (\n        <>\n          {this.state.isAdmin ? <NavbarAdmin /> : <Navbar />}\n          <center>Loading Web3, accounts, and contract...</center>\n        </>\n      );\n    }\n    if (!this.state.isAdmin) {\n      return (\n        <>\n          <Navbar />\n          <AdminOnly page=\"Add Candidate Page.\" />\n        </>\n      );\n    }\n    return (\n      <>\n        <NavbarAdmin />\n        <div className=\"container-main\">\n          <h2>Add a new candidate</h2>\n          <small>Total candidates: {this.state.candidateCount}</small>\n          <div className=\"container-item\">\n            <form className=\"form\">\n              <label className={\"label-ac\"}>\n                Header\n                <input\n                  className={\"input-ac\"}\n                  type=\"text\"\n                  placeholder=\"eg. Marcus\"\n                  value={this.state.header}\n                  onChange={this.updateHeader}\n                />\n              </label>\n              <label className={\"label-ac\"}>\n                Slogan\n                <input\n                  className={\"input-ac\"}\n                  type=\"text\"\n                  placeholder=\"eg. It is what it is\"\n                  value={this.state.slogan}\n                  onChange={this.updateSlogan}\n                />\n              </label>\n              <button\n                className=\"btn-add\"\n                disabled={\n                  this.state.header.length < 3 || this.state.header.length > 21\n                }\n                onClick={this.addCandidate}\n              >\n                Add\n              </button>\n            </form>\n          </div>\n        </div>\n        {loadAdded(this.state.candidates)}\n      </>\n    );\n  }\n}\nexport function loadAdded(candidates) {\n  const renderAdded = (candidate) => {\n    return (\n      <>\n        <div className=\"container-list success\">\n          <div\n            style={{\n              maxHeight: \"21px\",\n              overflow: \"auto\",\n            }}\n          >\n            {candidate.id}. <strong>{candidate.header}</strong>:{\" \"}\n            {candidate.slogan}\n          </div>\n        </div>\n      </>\n    );\n  };\n  return (\n    <div className=\"container-main\" style={{ borderTop: \"1px solid\" }}>\n      <div className=\"container-item info\">\n        <center>Candidates List</center>\n      </div>\n      {candidates.length < 1 ? (\n        <div className=\"container-item alert\">\n          <center>No candidates added.</center>\n        </div>\n      ) : (\n        <div\n          className=\"container-item\"\n          style={{\n            display: \"block\",\n            backgroundColor: \"#DDFFFF\",\n          }}\n        >\n          {candidates.map(renderAdded)}\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\n\nimport Navbar from \"../../Navbar/Navigation\";\nimport NavbarAdmin from \"../../Navbar/NavigationAdmin\";\n\nimport AdminOnly from \"../../AdminOnly\";\n\nimport getWeb3 from \"../../../getWeb3\";\nimport Election from \"../../../contracts/Election.json\";\n\nimport \"./Verification.css\";\n\nexport default class Registration extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ElectionInstance: undefined,\n      account: null,\n      web3: null,\n      isAdmin: false,\n      voterCount: undefined,\n      voters: [],\n    };\n  }\n\n  // refreshing once\n  componentDidMount = async () => {\n    if (!window.location.hash) {\n      window.location = window.location + \"#loaded\";\n      window.location.reload();\n    }\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Election.networks[networkId];\n      const instance = new web3.eth.Contract(\n        Election.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, ElectionInstance: instance, account: accounts[0] });\n\n      // Total number of candidates\n      const candidateCount = await this.state.ElectionInstance.methods\n        .getTotalCandidate()\n        .call();\n      this.setState({ candidateCount: candidateCount });\n\n      // Admin account and verification\n      const admin = await this.state.ElectionInstance.methods.getAdmin().call();\n      if (this.state.account === admin) {\n        this.setState({ isAdmin: true });\n      }\n      // Total number of voters\n      const voterCount = await this.state.ElectionInstance.methods\n        .getTotalVoter()\n        .call();\n      this.setState({ voterCount: voterCount });\n      // Loading all the voters\n      for (let i = 0; i < this.state.voterCount; i++) {\n        const voterAddress = await this.state.ElectionInstance.methods\n          .voters(i)\n          .call();\n        const voter = await this.state.ElectionInstance.methods\n          .voterDetails(voterAddress)\n          .call();\n        this.state.voters.push({\n          address: voter.voterAddress,\n          name: voter.name,\n          phone: voter.phone,\n          hasVoted: voter.hasVoted,\n          isVerified: voter.isVerified,\n          isRegistered: voter.isRegistered,\n        });\n      }\n      this.setState({ voters: this.state.voters });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n  renderUnverifiedVoters = (voter) => {\n    const verifyVoter = async (verifiedStatus, address) => {\n      await this.state.ElectionInstance.methods\n        .verifyVoter(verifiedStatus, address)\n        .send({ from: this.state.account, gas: 1000000 });\n      window.location.reload();\n    };\n    return (\n      <>\n        {voter.isVerified ? (\n          <div className=\"container-list success\">\n            <p style={{ margin: \"7px 0px\" }}>AC: {voter.address}</p>\n            <table>\n              <tr>\n                <th>Name</th>\n                <th>Phone</th>\n                <th>Voted</th>\n              </tr>\n              <tr>\n                <td>{voter.name}</td>\n                <td>{voter.phone}</td>\n                <td>{voter.hasVoted ? \"True\" : \"False\"}</td>\n              </tr>\n            </table>\n          </div>\n        ) : null}\n        <div\n          className=\"container-list attention\"\n          style={{ display: voter.isVerified ? \"none\" : null }}\n        >\n          <table>\n            <tr>\n              <th>Account address</th>\n              <td>{voter.address}</td>\n            </tr>\n            <tr>\n              <th>Name</th>\n              <td>{voter.name}</td>\n            </tr>\n            <tr>\n              <th>Phone</th>\n              <td>{voter.phone}</td>\n            </tr>\n            <tr>\n              <th>Voted</th>\n              <td>{voter.hasVoted ? \"True\" : \"False\"}</td>\n            </tr>\n            <tr>\n              <th>Verified</th>\n              <td>{voter.isVerified ? \"True\" : \"False\"}</td>\n            </tr>\n            <tr>\n              <th>Registered</th>\n              <td>{voter.isRegistered ? \"True\" : \"False\"}</td>\n            </tr>\n          </table>\n          <div style={{}}>\n            <button\n              className=\"btn-verification approve\"\n              disabled={voter.isVerified}\n              onClick={() => verifyVoter(true, voter.address)}\n            >\n              Approve\n            </button>\n          </div>\n        </div>\n      </>\n    );\n  };\n  render() {\n    if (!this.state.web3) {\n      return (\n        <>\n          {this.state.isAdmin ? <NavbarAdmin /> : <Navbar />}\n          <center>Loading Web3, accounts, and contract...</center>\n        </>\n      );\n    }\n    if (!this.state.isAdmin) {\n      return (\n        <>\n          <Navbar />\n          <AdminOnly page=\"Verification Page.\" />\n        </>\n      );\n    }\n    return (\n      <>\n        <NavbarAdmin />\n        <div className=\"container-main\">\n          <h3>Verification</h3>\n          <small>Total Voters: {this.state.voters.length}</small>\n          {this.state.voters.length < 1 ? (\n            <div className=\"container-item info\">None has registered yet.</div>\n          ) : (\n            <>\n              <div className=\"container-item info\">\n                <center>List of registered voters</center>\n              </div>\n              {this.state.voters.map(this.renderUnverifiedVoters)}\n            </>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n","import React from \"react\";\n\n// import FileReader from \"./FileReader\";\n\nconst test = () => {\n  return (\n    <>\n      <h1>Hello this is test page</h1>\n      {/* <FileReader /> */}\n    </>\n  );\n};\nexport default test;\n","import React from \"react\";\n\nimport \"./Footer.css\";\n\nconst Footer = () => (\n  <p></p>\n);\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Home from \"./component/Home\";\n\nimport Voting from \"./component/Voting/Voting\";\nimport Results from \"./component/Results/Results\";\nimport Registration from \"./component/Registration/Registration\";\n\nimport AddCandidate from \"./component/Admin/AddCandidate/AddCandidate\";\nimport Verification from \"./component/Admin/Verification/Verification\";\nimport test from \"./component/test\";\n// import StartEnd from \"./component/Admin/StartEnd/StartEnd\";\n\nimport Footer from \"./component/Footer/Footer\";\n\nimport \"./App.css\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/AddCandidate\" component={AddCandidate} />\n            <Route exact path=\"/Voting\" component={Voting} />\n            <Route exact path=\"/Results\" component={Results} />\n            <Route exact path=\"/Registration\" component={Registration} />\n            <Route exact path=\"/Verification\" component={Verification} />\n            <Route exact path=\"/test\" component={test} />\n            <Route exact path=\"*\" component={NotFound} />\n          </Switch>\n        </Router>\n        <Footer />\n      </div>\n    );\n  }\n}\nclass NotFound extends Component {\n  render() {\n    return (\n      <>\n        <h1>404 NOT FOUND!</h1>\n        <center>\n          <p>\n            The page your are looking for doesn't exist.\n            <br />\n            Go to{\" \"}\n            <Link\n              to=\"/\"\n              style={{ color: \"black\", textDecoration: \"underline\" }}\n            >\n              Home\n            </Link>\n          </p>\n        </center>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}